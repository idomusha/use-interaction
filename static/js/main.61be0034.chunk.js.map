{"version":3,"sources":["logo.svg","Log.js","useInteraction.js","Demo.styles.js","Demo.js","serviceWorker.js","index.js"],"names":["module","exports","COLOURS","trace","info","warn","error","level","message","source","namespace","createDebug","debug","color","this","generateMessage","getKey","event","keyCode","which","getTarget","target","srcElement","useInteraction","initial","initialPointerType","includes","useState","pointerType","setPointerType","prevPointerType","setPrevPointerType","pointerHistory","setPointerHistory","pointerAccuracy","setPointerAccuracy","touchStart","mouseMove","wheel","keyDown","firedEvent","setFiredEvent","inputs","keys","9","13","16","27","32","33","34","35","36","37","38","39","40","handleInteractionChange","useCallback","nextPointer","handleInteractionTouch","Log","type","current","handleInteractionMouse","handleInteractionKeyboard","Object","prototype","hasOwnProperty","call","indexOf","nodeName","toLowerCase","handleInteractionPointer","nextAccuracy","round","height","useEffect","window","addEventListener","removeEventListener","reduce","pointers","pointer","unshift","propTypes","initialHover","PropTypes","boolean","Demo","styled","div","Figure","figure","size","location","hover","setHover","imageHeight","setImageHeight","figcaptionHeight","setFigcaptionHeight","imageRef","useRef","figcaptionRef","updateFigureSize","offsetHeight","useLayoutEffect","img","Image","src","onload","toggleHover","className","data-user-interaction","data-user-can-hover","logo","alt","onClick","alert","navigate","pathname","state","page","replace","href","rel","id","MouseOutlined","SwapHoriz","TouchAppOutlined","KeyboardOutlined","ref","value","preventDefault","onMouseEnter","onMouseLeave","join","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61be0034.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import debug from 'debug'\r\n\r\nconst BASE = 'use-interaction'\r\nconst COLOURS = {\r\n  trace: '#1585c7',\r\n  info: '#61dafb',\r\n  warn: '#ff9e2c',\r\n  error: '#c71585',\r\n} // choose better colours :)\r\n\r\nclass Log {\r\n  generateMessage(level, message, source) {\r\n    // Set the prefix which will cause debug to enable the message\r\n    const namespace = `${BASE}:${level}`\r\n    const createDebug = debug(namespace)\r\n\r\n    // Set the colour of the message based on the level\r\n    createDebug.color = COLOURS[level]\r\n\r\n    if (source) {\r\n      createDebug(source, message)\r\n    } else {\r\n      createDebug(message)\r\n    }\r\n  }\r\n\r\n  trace(message, source) {\r\n    return this.generateMessage('trace', message, source)\r\n  }\r\n\r\n  info(message, source) {\r\n    return this.generateMessage('info', message, source)\r\n  }\r\n\r\n  warn(message, source) {\r\n    return this.generateMessage('warn', message, source)\r\n  }\r\n\r\n  error(message, source) {\r\n    return this.generateMessage('error', message, source)\r\n  }\r\n}\r\n\r\nexport default new Log()\r\n","import { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { round } from 'lodash'\n\nimport Log from './Log'\n\nconst getKey = event => (event.keyCode ? event.keyCode : event.which)\n\nconst getTarget = event => event.target || event.srcElement\n\nconst useInteraction = ({ initial = null } = {}) => {\n  const initialPointerType =\n    typeof initial === 'string' &&\n    ['touch', 'mouse', 'keyboard'].includes(initial)\n      ? initial\n      : null\n  const [pointerType, setPointerType] = useState(initialPointerType)\n  const [prevPointerType, setPrevPointerType] = useState(null)\n  const [pointerHistory, setPointerHistory] = useState([])\n  const [pointerAccuracy, setPointerAccuracy] = useState(null)\n  const [firedEvent, setFiredEvent] = useState({\n    touchStart: null,\n    mouseMove: null,\n    wheel: null,\n    keyDown: null,\n  })\n\n  const inputs = ['input', 'select', 'textarea']\n  const keys = {\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    27: 'esc',\n    32: 'space',\n    33: 'page up',\n    34: 'page down',\n    35: 'end',\n    36: 'home',\n    37: 'left arrow',\n    38: 'up arrow',\n    39: 'right arrow',\n    40: 'down arrow',\n  }\n\n  const handleInteractionChange = useCallback(\n    nextPointer => {\n      setPrevPointerType(pointerType)\n      setPointerType(nextPointer)\n    },\n    [pointerType]\n  )\n\n  const handleInteractionTouch = useCallback(\n    event => {\n      Log.info(event.type, event, firedEvent)\n\n      setFiredEvent(current => ({\n        ...current,\n        touchStart: true,\n        mouseMove: false,\n        wheel: false,\n      }))\n\n      if (pointerType === 'touch') return\n\n      handleInteractionChange('touch')\n    },\n    [firedEvent, pointerType, handleInteractionChange]\n  )\n\n  const handleInteractionMouse = useCallback(\n    event => {\n      Log.info(event.type, event, firedEvent)\n\n      // prevent false positive on mousemove with touch devices\n      if (!firedEvent.touchStart) {\n        setFiredEvent(current => ({\n          ...current,\n          ...(event.type === 'mousemove' && { mouseMove: true }),\n          ...(event.type === 'wheel' && { wheel: true }),\n        }))\n      }\n\n      // prevent false positive on mousemove when navigate with keyboard\n      if (firedEvent.keyDown) {\n        setFiredEvent(current => ({\n          ...current,\n          mouseMove: false,\n        }))\n      }\n\n      // reset interaction markers\n      setFiredEvent(current => ({\n        ...current,\n        touchStart: false,\n        keyDown: false,\n      }))\n\n      if (pointerType === 'mouse') return\n\n      if (\n        firedEvent.mouseMove === null ||\n        firedEvent.mouseMove === true ||\n        firedEvent.touchStart === false\n      ) {\n        handleInteractionChange('mouse')\n      }\n    },\n    [firedEvent, pointerType, handleInteractionChange]\n  )\n\n  const handleInteractionKeyboard = useCallback(\n    event => {\n      Log.info(event.type, event, firedEvent)\n\n      if (\n        // if the key is a accessible key\n        Object.prototype.hasOwnProperty.call(keys, getKey(event))\n      ) {\n        if (\n          // if the key is `TAB`\n          keys[getKey(event)] !== 'tab' &&\n          // only if the target is one of the elements in `inputs` list\n          inputs.indexOf(getTarget(event).nodeName.toLowerCase()) >= 0\n        ) {\n          // ignore navigation keys typing on form elements\n          return\n        }\n\n        // some pressed keys causes an event mousemove\n        setFiredEvent(current => ({\n          ...current,\n          keyDown: true,\n          touchStart: false,\n          mouseMove: false,\n          wheel: false,\n        }))\n\n        if (pointerType === 'keyboard') return\n\n        setPointerAccuracy(null)\n        handleInteractionChange('keyboard')\n      }\n    },\n    [firedEvent, keys, inputs, pointerType, handleInteractionChange]\n  )\n\n  const handleInteractionPointer = useCallback(\n    event => {\n      Log.info(event.type, event, firedEvent)\n\n      const nextAccuracy = round(event.height, 1)\n      if (\n        nextAccuracy > pointerAccuracy ||\n        prevPointerType !== event.pointerType\n      ) {\n        setPointerAccuracy(nextAccuracy)\n      }\n    },\n    [firedEvent, pointerAccuracy, prevPointerType]\n  )\n\n  useEffect(() => {\n    window.addEventListener('touchstart', handleInteractionTouch, false)\n    window.addEventListener('keydown', handleInteractionKeyboard, false)\n    window.addEventListener('pointerdown', handleInteractionPointer, false)\n\n    return () => {\n      window.removeEventListener('touchstart', handleInteractionTouch, false)\n      window.removeEventListener('keydown', handleInteractionKeyboard, false)\n      window.removeEventListener('pointerdown', handleInteractionPointer, false)\n    }\n  }, [\n    handleInteractionKeyboard,\n    handleInteractionPointer,\n    handleInteractionTouch,\n  ])\n\n  useEffect(() => {\n    if (firedEvent.mouseMove === true || firedEvent.wheel === true) {\n      window.removeEventListener('mousemove', handleInteractionMouse, false)\n      window.removeEventListener('wheel', handleInteractionMouse, false)\n    } else {\n      window.addEventListener('mousemove', handleInteractionMouse, false)\n      window.addEventListener('wheel', handleInteractionMouse, false)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleInteractionMouse, false)\n      window.removeEventListener('wheel', handleInteractionMouse, false)\n    }\n  }, [firedEvent.mouseMove, firedEvent.wheel, handleInteractionMouse])\n\n  useEffect(() => {\n    if (pointerType) {\n      setPointerHistory(current => {\n        return [...current, prevPointerType].reduce((pointers, pointer) => {\n          if (pointer !== null && pointer !== pointerType)\n            pointers.unshift(pointer)\n          return pointers\n        }, [])\n      })\n    }\n  }, [pointerType, prevPointerType])\n\n  return [pointerType, pointerHistory, pointerAccuracy]\n}\n\nuseInteraction.propTypes = {\n  initialHover: PropTypes.boolean,\n  debug: PropTypes.boolean,\n}\n\nexport default useInteraction\n","import styled from 'styled-components'\r\n\r\nconst Demo = styled.div`\r\n  ${({ pointer }) =>\r\n    pointer === 'keyboard'\r\n      ? `\r\n      *:focus {\r\n        outline: 2px solid #61dafb;\r\n        outline-offset: -1px;\r\n      }\r\n\r\n      a:focus {\r\n        outline: none;\r\n        color: #61dafb;\r\n        padding: 0.1rem 0.3rem;\r\n        margin: 0 -0.3rem;\r\n      }\r\n      `\r\n      : `\r\n      *:focus {\r\n        outline: none;\r\n      }\r\n  `}\r\n`\r\n\r\nconst Figure = styled.figure`\r\n  height: ${({ pointer, size }) =>\r\n    pointer === 'mouse'\r\n      ? `${size[0]}px`\r\n      : `${size[0] + size[1]}px` || `${size[0]}px`};\r\n  transition: height 0.3s ease;\r\n\r\n  ${({ pointer }) =>\r\n    pointer === 'mouse'\r\n      ? `\r\n      &{\r\n        img {\r\n          transform: translate3d(0, 0, 0);\r\n          transition: transform 0.3s ease;\r\n        }\r\n        figcaption {\r\n          position: absolute;\r\n          bottom: 0;\r\n          left: 0;\r\n          transform: translate3d(0, 144px, 0);\r\n          transition: transform 0.3s ease;\r\n        }\r\n\r\n        &:hover {\r\n          figcaption {\r\n            transform: translate3d(0, 0, 0);\r\n            transition: transform 0.3s ease;\r\n          }\r\n          img {\r\n            transform: translate3d(0, -144px, 0);\r\n          }\r\n        }\r\n      }\r\n    `\r\n      : `\r\n      figcaption {\r\n        transform: translate3d(0, 0, 0);\r\n        position: relative;\r\n        bottom: auto;\r\n        left: auto;\r\n        height: auto;\r\n      }\r\n  `}\r\n`\r\n\r\nexport default {\r\n  Demo,\r\n  Figure,\r\n}\r\n","import React, { useState, useLayoutEffect, useRef } from 'react'\nimport {\n  MouseOutlined,\n  TouchAppOutlined,\n  KeyboardOutlined,\n  SwapHoriz,\n} from '@material-ui/icons'\nimport { navigate } from '@reach/router'\n\nimport useInteraction from './useInteraction'\n\nimport logo from './logo.svg'\nimport './Reset.scss'\nimport './Demo.scss'\nimport Styled from './Demo.styles'\n\nconst Demo = ({ location }) => {\n  const [pointerType, pointerHistory, pointerAccuracy] = useInteraction({\n    initial: null,\n  })\n  const [hover, setHover] = useState(false)\n  const [imageHeight, setImageHeight] = useState(null)\n  const [figcaptionHeight, setFigcaptionHeight] = useState(null)\n  const imageRef = useRef(null)\n  const figcaptionRef = useRef(null)\n\n  const updateFigureSize = () => {\n    setImageHeight(imageRef.current.offsetHeight)\n    setFigcaptionHeight(figcaptionRef.current.offsetHeight)\n  }\n\n  useLayoutEffect(() => {\n    let img = new Image()\n    img.src = imageRef.current.src\n    img.onload = () => {\n      updateFigureSize()\n    }\n\n    window.addEventListener('resize', updateFigureSize)\n    return () => window.removeEventListener('resize', updateFigureSize)\n  }, [])\n\n  const handleClick = event => {\n    event.preventDefault()\n    alert('clicked')\n  }\n\n  const handleNavigate = () => {\n    alert('navigated')\n    navigate(location.pathname, {\n      state: {\n        page: {},\n      },\n      replace: true,\n    })\n  }\n\n  const toggleHover = event => {\n    pointerType === 'mouse' && setHover(current => !current)\n  }\n\n  return (\n    <Styled.Demo\n      className=\"Demo\"\n      pointer={pointerType}\n      data-user-interaction={pointerType}\n      data-user-can-hover={pointerType === 'mouse'}\n    >\n      <header>\n        <img src={logo} className=\"React-logo\" alt=\"logo\" />\n        <h1 onClick={handleNavigate}>useInteraction</h1>\n      </header>\n      <main>\n        <h3>\n          React hook <code>useInteraction()</code> allows to get the user\n          interaction type: <code>touch</code>, <code>mouse</code> or{' '}\n          <code>keyboard</code>.\n          <br />\n        </h3>\n        <p>\n          <strong>\n            <code className=\"variable\">pointerType</code>\n          </strong>{' '}\n          provides the current input of the user interaction.\n          <br /> <br />\n          <strong>\n            <code className=\"variable\">pointerHistory</code>\n          </strong>{' '}\n          keeps a record of previous inputs of the user interaction listed in\n          reverse chronological order.\n          <br /> <br />\n          <strong>\n            <code className=\"variable\">pointerAccuracy</code>\n          </strong>{' '}\n          is the max size of contact geometry collected from the current\n          pointer.\n          <br />\n          [Experimental Feature]{' '}\n          <i>\n            Not all browsers yet support{' '}\n            <a\n              href=\"https://caniuse.com/#feat=pointer\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Pointer events\n            </a>\n          </i>\n        </p>\n\n        <section id=\"image\">\n          <h2>detect hover capability</h2>\n          <div>\n            <MouseOutlined /> <SwapHoriz /> <TouchAppOutlined />\n            <br />\n            <span>\n              switching between <code>mouse</code>/<code>touch</code> or{' '}\n              <code>mouse</code>/<code>keyboard</code> will show/hide the figure\n              caption\n            </span>\n            <br />\n            <MouseOutlined /> <SwapHoriz /> <KeyboardOutlined />\n          </div>\n          <Styled.Figure\n            pointer={pointerType}\n            size={[imageHeight, figcaptionHeight]}\n          >\n            <a\n              href=\"https://flic.kr/p/kq58ST\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                ref={imageRef}\n                src=\"https://farm8.staticflickr.com/7353/12743181443_9dfd24a886_z.jpg\"\n                alt=\"Beautiful light\"\n              />\n            </a>\n            <figcaption ref={figcaptionRef}>\n              <h3>\n                <a\n                  href=\"https://flic.kr/p/kq58ST\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Beautiful light\n                </a>{' '}\n                (CC BY-NC-ND 2.0)\n              </h3>\n              <small>\n                by{' '}\n                <a\n                  href=\"https://www.flickr.com/people/rfunnell/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Ross Funnell\n                </a>\n              </small>\n              <p className=\"description\">\n                The room was vacant except for a metal slab that served as a bed\n                and the six-legged, cat-like creature sitting on the edge of the\n                bed watching its sleeping occupant.\n              </p>\n            </figcaption>\n          </Styled.Figure>\n          <h3>\n            It can be used to present to the user actions and information behind\n            hover states; in place of the hover CSS media feature{' '}\n            <code>@media (hover: hover)</code>, not supported by all browsers.\n          </h3>\n        </section>\n        <section id=\"form\">\n          <h2>detect keyboard navigation</h2>\n          <div>\n            <MouseOutlined /> <SwapHoriz /> <KeyboardOutlined />\n            <br />\n            <span>\n              switching between <code>mouse</code>/<code>keyboard</code> will\n              show/hide an outline around the focused element\n            </span>\n          </div>\n          <form>\n            <input type=\"text\" />\n            <select>\n              <option value=\"\"></option>\n              <option value=\"0\">0</option>\n              <option value=\"1\">1</option>\n            </select>\n            <textarea />\n            <div>{hover ? `hovered` : `-`}</div>\n            <button\n              onClick={handleClick}\n              onMouseEnter={toggleHover}\n              onMouseLeave={toggleHover}\n            >\n              OKAY\n            </button>\n          </form>\n          <h3>\n            It can also help to provide the keyboard users with a visual\n            indicator of the element (link, button, and form control) that\n            currently has focus.\n            <br />\n            <br />\n            <i>\n              Keyboard strokes has no effect on the interaction type when the\n              user is typing in a form element (input, select, and textarea).\n              Only keyboard navigation is monitored.\n            </i>\n          </h3>\n        </section>\n      </main>\n      <footer>\n        <code>\n          pointer: {pointerType || `none`} (can\n          {pointerType !== 'mouse' && 'not'} hover)\n          <br />\n          history: {`[${pointerHistory.join(', ')}]`}\n          <br />\n          accuracy: {pointerAccuracy || `none`}\n          <br />\n        </code>\n      </footer>\n    </Styled.Demo>\n  )\n}\n\nexport default Demo\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Demo from './Demo'\nimport * as serviceWorker from './serviceWorker'\nimport { Location } from '@reach/router'\n\nif (process.env.NODE_ENV !== 'production') {\n  localStorage.setItem('debug', 'use-interaction:*')\n}\n\nReactDOM.render(\n  <Location>{({ location }) => <Demo location={location} />}</Location>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}