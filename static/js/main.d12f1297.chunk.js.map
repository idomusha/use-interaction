{"version":3,"sources":["logo.svg","useInteraction.js","Demo.js","serviceWorker.js","index.js"],"names":["module","exports","interactionTypes","getKey","event","keyCode","which","useInteraction","useState","userInteraction","setUserInteraction","accuracy","setAccuracy","canHover","setCanHover","touchStart","mouseMove","mouseOver","keyDown","setEvent","inputs","keys","9","13","16","27","32","33","34","35","36","37","38","39","40","handleInteractionTouch","useCallback","console","log","current","Set","handleInteractionMouse","handleInteractionKeyboard","Object","prototype","hasOwnProperty","call","indexOf","target","srcElement","getTarget","nodeName","toLowerCase","handleInteractionPointer","height","handleInteractionHover","useEffect","window","addEventListener","removeEventListener","join","Demo","pointerSize","className","data-user-interaction","src","logo","alt","id","href","rel","class","type","value","toString","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d12f1297.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState, useEffect, useCallback } from 'react'\r\n\r\nlet interactionTypes = []\r\n\r\nconst getKey = event => (event.keyCode ? event.keyCode : event.which)\r\n\r\nconst getTarget = event => event.target || event.srcElement\r\n\r\nconst useInteraction = () => {\r\n  const [userInteraction, setUserInteraction] = useState(null)\r\n  const [accuracy, setAccuracy] = useState(null)\r\n  const [canHover, setCanHover] = useState(false)\r\n  const [event, setEvent] = useState({\r\n    touchStart: null,\r\n    mouseMove: null,\r\n    mouseOver: null,\r\n    keyDown: null,\r\n  })\r\n  const inputs = ['input', 'select', 'textarea']\r\n  const keys = {\r\n    9: 'tab',\r\n    13: 'enter',\r\n    16: 'shift',\r\n    27: 'esc',\r\n    32: 'space',\r\n    33: 'page up',\r\n    34: 'page down',\r\n    35: 'end',\r\n    36: 'home',\r\n    37: 'left arrow',\r\n    38: 'up arrow',\r\n    39: 'right arrow',\r\n    40: 'down arrow',\r\n  }\r\n\r\n  const handleInteractionTouch = useCallback(() => {\r\n    console.log('touchstart')\r\n\r\n    setEvent(current => ({\r\n      ...current,\r\n      touchStart: true,\r\n      mouseMove: false,\r\n    }))\r\n\r\n    interactionTypes = [...new Set([...interactionTypes, 'touch'])]\r\n    setUserInteraction('touch')\r\n  }, [setEvent])\r\n\r\n  const handleInteractionMouse = useCallback(() => {\r\n    console.log('mousemove')\r\n\r\n    // prevent false positive on mousemove with touch devices\r\n    if (event.touchStart) {\r\n      setCanHover(false)\r\n    } else {\r\n      setEvent(current => ({\r\n        ...current,\r\n        mouseMove: true,\r\n      }))\r\n    }\r\n\r\n    if (event.keyDown) {\r\n      setCanHover(true)\r\n      setEvent(current => ({\r\n        ...current,\r\n        mouseMove: false,\r\n      }))\r\n    }\r\n\r\n    setEvent(current => ({\r\n      ...current,\r\n      // prevent false positive on mousemove with touch devices\r\n      touchStart: false,\r\n      // prevent false positive on mousemove when navigate with keyboard\r\n      keyDown: false,\r\n    }))\r\n\r\n    console.log(event)\r\n    console.log(userInteraction)\r\n    if (\r\n      event.mouseMove === null ||\r\n      event.mouseMove === true ||\r\n      event.touchStart === false\r\n    ) {\r\n      interactionTypes = [...new Set([...interactionTypes, 'mouse'])]\r\n      setUserInteraction('mouse')\r\n    }\r\n  }, [event, userInteraction, setEvent, setCanHover])\r\n\r\n  const handleInteractionKeyboard = useCallback(\r\n    event => {\r\n      console.log('keydown', event)\r\n\r\n      if (\r\n        // if the key is a accessible key\r\n        Object.prototype.hasOwnProperty.call(keys, getKey(event))\r\n      ) {\r\n        if (\r\n          // if the key is `TAB`\r\n          keys[getKey(event)] !== 'tab' &&\r\n          // only if the target is one of the elements in `inputs` list\r\n          inputs.indexOf(getTarget(event).nodeName.toLowerCase()) >= 0\r\n        ) {\r\n          // ignore navigation keys typing on form elements\r\n          return\r\n        }\r\n\r\n        // this pressed key causes an event mousemove\r\n        setEvent(current => ({\r\n          ...current,\r\n          keyDown: true,\r\n          mouseMove: false,\r\n        }))\r\n\r\n        setCanHover(false)\r\n\r\n        if (userInteraction === 'keyboard') return\r\n\r\n        interactionTypes = [...new Set([...interactionTypes, 'keyboard'])]\r\n        setUserInteraction('keyboard')\r\n      }\r\n    },\r\n    [inputs, keys, userInteraction, setEvent]\r\n  )\r\n\r\n  const handleInteractionPointer = useCallback(\r\n    event => {\r\n      setAccuracy(event.height)\r\n    },\r\n    [setAccuracy]\r\n  )\r\n\r\n  const handleInteractionHover = useCallback(\r\n    event => {\r\n      console.log('mouseover')\r\n      setEvent(current => ({\r\n        ...current,\r\n        mouseOver: true,\r\n      }))\r\n      setCanHover(true)\r\n    },\r\n    [setEvent, setCanHover]\r\n  )\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('touchstart', handleInteractionTouch, false)\r\n    !event.mouseMove\r\n      ? window.addEventListener('mousemove', handleInteractionMouse, false)\r\n      : window.removeEventListener('mousemove', handleInteractionMouse, false)\r\n    window.addEventListener('keydown', handleInteractionKeyboard, false)\r\n    window.addEventListener('pointerdown', handleInteractionPointer, false)\r\n    !event.mouseMove\r\n      ? window.addEventListener('mouseover', handleInteractionHover, false)\r\n      : window.removeEventListener('mouseover', handleInteractionHover, false)\r\n\r\n    return () => {\r\n      window.removeEventListener('touchstart', handleInteractionTouch, false)\r\n      window.removeEventListener('mousemove', handleInteractionMouse, false)\r\n      window.removeEventListener('keydown', handleInteractionKeyboard, false)\r\n      window.removeEventListener('pointerdown', handleInteractionPointer, false)\r\n      window.removeEventListener('mouseover', handleInteractionHover, false)\r\n    }\r\n  }, [\r\n    event.mouseMove,\r\n    event.touchStart,\r\n    handleInteractionHover,\r\n    handleInteractionKeyboard,\r\n    handleInteractionMouse,\r\n    handleInteractionPointer,\r\n    handleInteractionTouch,\r\n    inputs,\r\n    keys,\r\n    userInteraction,\r\n  ])\r\n  console.log(event)\r\n  console.log([\r\n    userInteraction,\r\n    `[${interactionTypes.join(', ')}]`,\r\n    accuracy,\r\n    canHover,\r\n  ])\r\n  return [userInteraction, interactionTypes, accuracy, canHover]\r\n}\r\n\r\nexport default useInteraction\r\n","import React from 'react'\n\nimport logo from './logo.svg'\nimport './Reset.scss'\nimport './Demo.scss'\nimport useInteraction from './useInteraction'\n\nconst Demo = () => {\n  const [\n    userInteraction,\n    interactionTypes,\n    pointerSize,\n    canHover,\n  ] = useInteraction()\n  return (\n    <div className=\"Demo\" data-user-interaction={userInteraction}>\n      <header>\n        <img src={logo} className=\"React-logo\" alt=\"logo\" />\n      </header>\n      <main>\n        <section id=\"image\">\n          <h2>cat</h2>\n          <figure userInteraction={userInteraction}>\n            <a\n              href=\"https://flic.kr/p/kq58ST\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src=\"https://farm8.staticflickr.com/7353/12743181443_9dfd24a886_z.jpg\"\n                alt=\"Beautiful light\"\n              />\n            </a>\n            <figcaption>\n              <h3>\n                <a\n                  href=\"https://flic.kr/p/kq58ST\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Beautiful light\n                </a>{' '}\n                (CC BY-NC-ND 2.0)\n              </h3>\n              <small>\n                by{' '}\n                <a\n                  href=\"https://www.flickr.com/people/rfunnell/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Ross Funnell\n                </a>\n              </small>\n              <p class=\"description\">\n                The room was vacant except for a metal slab that served as a bed\n                and the six-legged, cat-like creature sitting on the edge of the\n                bed watching its sleeping occupant.\n              </p>\n            </figcaption>\n          </figure>\n        </section>\n        <section id=\"form\">\n          <h2>not cat</h2>\n          <form>\n            <input type=\"text\" />\n            <select>\n              <option value=\"\"></option>\n              <option value=\"0\">0</option>\n              <option value=\"1\">1</option>\n            </select>\n            <textarea />\n            <button>OKAY</button>\n          </form>\n        </section>\n      </main>\n      <footer>\n        <code>\n          user interaction: {userInteraction || `none`}\n          <br />\n          interaction types used: {`[${interactionTypes.join(', ')}]`}\n          <br />\n          accuracy: {pointerSize || `none`}\n          <br />\n          user can hover: {canHover.toString()}\n        </code>\n      </footer>\n    </div>\n  )\n}\n\nexport default Demo\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Demo from './Demo'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Demo />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}