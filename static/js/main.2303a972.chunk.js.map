{"version":3,"sources":["logo.svg","useInteraction.js","Demo.js","serviceWorker.js","index.js"],"names":["module","exports","history","getKey","event","keyCode","which","getTarget","target","srcElement","round","value","digits","multiplier","Math","pow","useInteraction","initialHover","useState","interaction","setInteraction","canHover","setCanHover","accuracy","setAccuracy","touchStart","mouseMove","mouseOver","keyDown","setEvent","inputs","keys","9","13","16","27","32","33","34","35","36","37","38","39","40","handleInteractionTouch","useCallback","console","log","current","Set","handleInteractionMouse","handleInteractionKeyboard","Object","prototype","hasOwnProperty","call","indexOf","nodeName","toLowerCase","handleInteractionPointer","height","useEffect","window","addEventListener","removeEventListener","join","propTypes","PropTypes","boolean","Demo","className","data-user-interaction","data-user-can-hover","src","logo","alt","id","href","rel","type","toString","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2303a972.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\n\nlet history = []\n\nconst getKey = event => (event.keyCode ? event.keyCode : event.which)\n\nconst getTarget = event => event.target || event.srcElement\n\nconst round = (value, digits) => {\n  var multiplier = Math.pow(10, digits || 0)\n  return Math.round(value * multiplier) / multiplier\n}\n\nconst useInteraction = ({ initialHover = false } = {}) => {\n  const [interaction, setInteraction] = useState(null)\n  const [canHover, setCanHover] = useState(initialHover)\n  const [accuracy, setAccuracy] = useState(null)\n  const [event, setEvent] = useState({\n    touchStart: null,\n    mouseMove: null,\n    mouseOver: null,\n    keyDown: null,\n  })\n  const inputs = ['input', 'select', 'textarea']\n  const keys = {\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    27: 'esc',\n    32: 'space',\n    33: 'page up',\n    34: 'page down',\n    35: 'end',\n    36: 'home',\n    37: 'left arrow',\n    38: 'up arrow',\n    39: 'right arrow',\n    40: 'down arrow',\n  }\n\n  const handleInteractionTouch = useCallback(() => {\n    console.log('touchstart')\n\n    setEvent(current => ({\n      ...current,\n      touchStart: true,\n      mouseMove: false,\n    }))\n\n    history = [...new Set([...history, 'touch'])]\n    setInteraction('touch')\n    setCanHover(false)\n  }, [setEvent])\n\n  const handleInteractionMouse = useCallback(() => {\n    console.log('mousemove')\n\n    // prevent false positive on mousemove with touch devices\n    if (!event.touchStart) {\n      setEvent(current => ({\n        ...current,\n        mouseMove: true,\n      }))\n    }\n\n    // prevent false positive on mousemove when navigate with keyboard\n    if (event.keyDown) {\n      setEvent(current => ({\n        ...current,\n        mouseMove: false,\n      }))\n    }\n\n    setEvent(current => ({\n      ...current,\n      // prevent false positive on mousemove with touch devices\n      touchStart: false,\n      // prevent false positive on mousemove when navigate with keyboard\n      keyDown: false,\n    }))\n\n    console.log(event)\n    console.log(interaction)\n    if (\n      event.mouseMove === null ||\n      event.mouseMove === true ||\n      event.touchStart === false\n    ) {\n      history = [...new Set([...history, 'mouse'])]\n      setInteraction('mouse')\n      setCanHover(true)\n    }\n  }, [event, interaction, setEvent, setCanHover])\n\n  const handleInteractionKeyboard = useCallback(\n    event => {\n      console.log('keydown', event)\n\n      if (\n        // if the key is a accessible key\n        Object.prototype.hasOwnProperty.call(keys, getKey(event))\n      ) {\n        if (\n          // if the key is `TAB`\n          keys[getKey(event)] !== 'tab' &&\n          // only if the target is one of the elements in `inputs` list\n          inputs.indexOf(getTarget(event).nodeName.toLowerCase()) >= 0\n        ) {\n          // ignore navigation keys typing on form elements\n          return\n        }\n\n        // this pressed key causes an event mousemove\n        setEvent(current => ({\n          ...current,\n          keyDown: true,\n          mouseMove: false,\n        }))\n\n        if (interaction === 'keyboard') return\n\n        history = [...new Set([...history, 'keyboard'])]\n        setInteraction('keyboard')\n        setCanHover(false)\n      }\n    },\n    [inputs, keys, interaction, setEvent]\n  )\n\n  const handleInteractionPointer = useCallback(\n    event => {\n      setAccuracy(round(event.height, 1))\n    },\n    [setAccuracy]\n  )\n\n  useEffect(() => {\n    window.addEventListener('touchstart', handleInteractionTouch, false)\n    !event.mouseMove\n      ? window.addEventListener('mousemove', handleInteractionMouse, false)\n      : window.removeEventListener('mousemove', handleInteractionMouse, false)\n    window.addEventListener('keydown', handleInteractionKeyboard, false)\n    window.addEventListener('pointerdown', handleInteractionPointer, false)\n\n    return () => {\n      window.removeEventListener('touchstart', handleInteractionTouch, false)\n      window.removeEventListener('mousemove', handleInteractionMouse, false)\n      window.removeEventListener('keydown', handleInteractionKeyboard, false)\n      window.removeEventListener('pointerdown', handleInteractionPointer, false)\n    }\n  }, [\n    event.mouseMove,\n    event.touchStart,\n    handleInteractionKeyboard,\n    handleInteractionMouse,\n    handleInteractionPointer,\n    handleInteractionTouch,\n    inputs,\n    keys,\n    interaction,\n  ])\n  console.log(event)\n  console.log([interaction, `[${history.join(', ')}]`, canHover, accuracy])\n  return [interaction, history, canHover, accuracy]\n}\n\nuseInteraction.propTypes = {\n  initialHover: PropTypes.boolean,\n}\n\nexport default useInteraction\n","import React from 'react'\n\nimport logo from './logo.svg'\nimport './Reset.scss'\nimport './Demo.scss'\nimport useInteraction from './useInteraction'\n\nconst Demo = () => {\n  const [interaction, history, canHover, accuracy] = useInteraction()\n\n  return (\n    <div\n      className=\"Demo\"\n      data-user-interaction={interaction}\n      data-user-can-hover={canHover}\n    >\n      <header>\n        <img src={logo} className=\"React-logo\" alt=\"logo\" />\n        <h1>useInteraction</h1>\n      </header>\n      <main>\n        <h3>\n          React hook <code className=\"variable\">useInteraction()</code> allows\n          you to get the user interaction type: <code>touch</code>,{' '}\n          <code>mouse</code> or <code>keyboard</code>.\n          <br />\n        </h3>\n        <p>\n          <strong>\n            <code className=\"variable\">interaction</code>\n          </strong>{' '}\n          provides the actual input used to navigate.\n          <br /> <br />\n          <strong>\n            <code className=\"variable\">history</code>\n          </strong>{' '}\n          keeps a record of all user interaction types. That way a user that\n          interacts both with mouse and touch can easily be detected.\n          <br /> <br />\n          <strong>\n            <code className=\"variable\">canHover</code>\n          </strong>{' '}\n          is a shorcut for any type of interaction except mouse, and allows to\n          display hidden information to the user in this case.\n          <br /> <br />\n          <strong>\n            <code className=\"variable\">accuracy</code>\n          </strong>{' '}\n          is the size of contact geometry of the pointer. The higher the number,\n          the bigger the button size should be defined.\n        </p>\n\n        <section id=\"image\">\n          <h2>\n            w/ <code>canHover</code>\n          </h2>\n          <figure interaction={interaction}>\n            <a\n              href=\"https://flic.kr/p/kq58ST\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src=\"https://farm8.staticflickr.com/7353/12743181443_9dfd24a886_z.jpg\"\n                alt=\"Beautiful light\"\n              />\n            </a>\n            <figcaption>\n              <h3>\n                <a\n                  href=\"https://flic.kr/p/kq58ST\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Beautiful light\n                </a>{' '}\n                (CC BY-NC-ND 2.0)\n              </h3>\n              <small>\n                by{' '}\n                <a\n                  href=\"https://www.flickr.com/people/rfunnell/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Ross Funnell\n                </a>\n              </small>\n              <p className=\"description\">\n                The room was vacant except for a metal slab that served as a bed\n                and the six-legged, cat-like creature sitting on the edge of the\n                bed watching its sleeping occupant.\n              </p>\n            </figcaption>\n          </figure>\n          <h3>\n            By example, we may have different displays depending on whether or\n            not the user can hover.\n            <br />\n          </h3>\n        </section>\n        <section id=\"form\">\n          <h2>\n            w/ <code>interaction</code>\n          </h2>\n          <form>\n            <input type=\"text\" />\n            <select>\n              <option value=\"\"></option>\n              <option value=\"0\">0</option>\n              <option value=\"1\">1</option>\n            </select>\n            <textarea />\n            <button>OKAY</button>\n          </form>\n          <h3>\n            It could also be useful for accessibility: by providing to the user\n            a visual indicator of the element that currently has keyboard focus.\n            <br />\n            <br />\n            Keyboard strokes has no effect on the interaction type when the user\n            is typing in a form element. Only keyboard navigation is monitored.\n          </h3>\n        </section>\n      </main>\n      <footer>\n        <code>\n          interaction: {interaction || `none`}\n          <br />\n          history: {`[${history.join(', ')}]`}\n          <br />\n          can hover: {canHover.toString()}\n          <br />\n          accuracy: {accuracy || `none`}\n        </code>\n      </footer>\n    </div>\n  )\n}\n\nexport default Demo\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Demo from './Demo'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Demo />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}