{"version":3,"sources":["logo.svg","useInteraction.js","Demo.styles.js","Demo.js","index.js"],"names":["module","exports","log","ulog","setMaxPointerSize","getKey","event","keyCode","which","useInteraction","initial","initialPointerType","includes","useState","pointerType","setPointerType","pointerHistory","setPointerHistory","pointerAccuracy","setPointerAccuracy","touchstart","mousemove","wheel","keydown","firedEvent","setFiredEvent","inputs","keys","9","13","16","27","32","33","34","35","36","37","38","39","40","handleInteractionChange","useCallback","info","type","current","find","e","setInteraction","nextPointerType","reduce","pointers","pointer","push","handleInteractionTouch","handleInteractionMouse","handleInteractionKeyboard","Object","prototype","hasOwnProperty","call","indexOf","target","nodeName","toLowerCase","nextAccuracy","round","height","handleInteractionPointer","useEffect","window","addEventListener","removeEventListener","propTypes","PropTypes","boolean","Demo","styled","div","Figure","figure","size","location","hover","setHover","imageHeight","setImageHeight","figcaptionHeight","setFigcaptionHeight","imageRef","useRef","figcaptionRef","updateFigureSize","offsetHeight","useLayoutEffect","img","Image","src","onload","toggleHover","className","data-user-interaction","data-user-can-hover","logo","alt","onClick","alert","navigate","pathname","state","page","replace","href","rel","id","MouseOutlined","SwapHoriz","TouchAppOutlined","KeyboardOutlined","ref","value","preventDefault","onMouseEnter","onMouseLeave","join","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8c11c5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState, useEffect, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { round } from 'lodash'\nimport ulog from 'ulog'\n\nconst log = ulog('use-interaction')\nlet setMaxPointerSize = null\nconst getKey = event => (event.keyCode ? event.keyCode : event.which)\n\nconst useInteraction = ({ initial = null } = {}) => {\n  const initialPointerType =\n    typeof initial === 'string' &&\n    ['touch', 'mouse', 'keyboard'].includes(initial)\n      ? initial\n      : null\n  const [pointerType, setPointerType] = useState(initialPointerType)\n  const [pointerHistory, setPointerHistory] = useState([])\n  const [pointerAccuracy, setPointerAccuracy] = useState(null)\n  const [firedEvent, setFiredEvent] = useState({\n    touchstart: null,\n    mousemove: null,\n    wheel: null,\n    keydown: null,\n  })\n\n  const inputs = ['input', 'select', 'textarea']\n  const keys = {\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    27: 'esc',\n    32: 'space',\n    33: 'page up',\n    34: 'page down',\n    35: 'end',\n    36: 'home',\n    37: 'left arrow',\n    38: 'up arrow',\n    39: 'right arrow',\n    40: 'down arrow',\n  }\n\n  const handleInteractionChange = useCallback(event => {\n    log.info(event, event.type)\n\n    setFiredEvent(current => ({\n      ...current,\n      ...(['touchstart', 'keydown'].includes(event.type) && {\n        [event.type]: true,\n        [['touchstart', 'keydown'].find(e => e !== event.type)]: null,\n        mousemove: event.type === 'touchstart' ? false : null,\n        wheel: null,\n      }),\n      ...(event.type === 'mousemove' && {\n        mousemove: current.mousemove === false ? null : true,\n        touchstart: current.mousemove === false ? true : null,\n        keydown: null,\n      }),\n      ...(event.type === 'wheel' && {\n        wheel: true,\n        touchstart: null,\n        keydown: null,\n      }),\n    }))\n  }, [])\n\n  const setInteraction = useCallback(\n    nextPointerType => {\n      setPointerHistory(current =>\n        [pointerType, ...current].reduce((pointers, pointer) => {\n          if (pointer !== null && pointer !== nextPointerType)\n            pointers.push(pointer)\n          return pointers\n        }, [])\n      )\n      setPointerType(nextPointerType)\n    },\n    [pointerType]\n  )\n\n  const handleInteractionTouch = useCallback(\n    event => {\n      handleInteractionChange(event)\n    },\n    [handleInteractionChange]\n  )\n\n  const handleInteractionMouse = useCallback(\n    event => {\n      handleInteractionChange(event)\n    },\n    [handleInteractionChange]\n  )\n\n  const handleInteractionKeyboard = useCallback(\n    event => {\n      if (\n        // if the key is a accessible key\n        Object.prototype.hasOwnProperty.call(keys, getKey(event))\n      ) {\n        if (\n          // if the key is `TAB`\n          keys[getKey(event)] !== 'tab' &&\n          // only if the target is one of the elements in `inputs` list\n          inputs.indexOf(event.target && event.target.nodeName.toLowerCase()) >=\n            0\n        ) {\n          // ignore navigation keys typing on form elements\n          return\n        }\n\n        handleInteractionChange(event)\n      }\n    },\n    [keys, inputs, handleInteractionChange]\n  )\n\n  setMaxPointerSize = event => {\n    log.info(event, event.type, event.pointerType)\n\n    const nextAccuracy = round(event.height, 1)\n\n    if (nextAccuracy > pointerAccuracy) {\n      setPointerAccuracy(nextAccuracy)\n    }\n  }\n\n  const handleInteractionPointer = useCallback(setMaxPointerSize, [\n    pointerAccuracy,\n  ])\n\n  useEffect(() => {\n    window.addEventListener('touchstart', handleInteractionTouch, false)\n    window.addEventListener('keydown', handleInteractionKeyboard, false)\n    window.addEventListener('pointerdown', handleInteractionPointer, false)\n\n    return () => {\n      window.removeEventListener('touchstart', handleInteractionTouch, false)\n      window.removeEventListener('keydown', handleInteractionKeyboard, false)\n      window.removeEventListener('pointerdown', handleInteractionPointer, false)\n    }\n  }, [\n    handleInteractionTouch,\n    handleInteractionKeyboard,\n    handleInteractionPointer,\n  ])\n\n  useEffect(() => {\n    if (firedEvent.mousemove === true || firedEvent.wheel === true) {\n      window.removeEventListener('mousemove', handleInteractionMouse, false)\n      window.removeEventListener('wheel', handleInteractionMouse, false)\n    } else {\n      window.addEventListener('mousemove', handleInteractionMouse, false)\n      window.addEventListener('wheel', handleInteractionMouse, false)\n    }\n\n    return () => {\n      window.removeEventListener('mousemove', handleInteractionMouse, false)\n      window.removeEventListener('wheel', handleInteractionMouse, false)\n    }\n  }, [firedEvent, handleInteractionMouse])\n\n  useEffect(() => {\n    log.info('firedEvent', { ...firedEvent })\n\n    if (firedEvent.touchstart) setInteraction('touch')\n    if (firedEvent.mousemove || firedEvent.wheel) setInteraction('mouse')\n    if (firedEvent.keydown) setInteraction('keyboard')\n    if (firedEvent.mousemove || firedEvent.wheel || firedEvent.keydown)\n      setPointerAccuracy(null)\n  }, [firedEvent, setInteraction])\n\n  return [pointerType, pointerHistory, pointerAccuracy]\n}\n\nuseInteraction.propTypes = {\n  initial: PropTypes.boolean,\n}\n\nexport default useInteraction\nexport { setMaxPointerSize, log }\n","import styled from 'styled-components'\r\n\r\nconst Demo = styled.div`\r\n  ${({ pointer }) =>\r\n    pointer === 'keyboard'\r\n      ? `\r\n      *:focus {\r\n        outline: 2px solid #61dafb;\r\n        outline-offset: -1px;\r\n      }\r\n\r\n      a:focus {\r\n        outline: none;\r\n        color: #61dafb;\r\n        padding: 0.1rem 0.3rem;\r\n        margin: 0 -0.3rem;\r\n      }\r\n      `\r\n      : `\r\n      *:focus {\r\n        outline: none;\r\n      }\r\n  `}\r\n`\r\n\r\nconst Figure = styled.figure`\r\n  height: ${({ pointer, size }) =>\r\n    pointer === 'mouse'\r\n      ? `${size[0]}px`\r\n      : `${size[0] + size[1]}px` || `${size[0]}px`};\r\n  transition: height 0.3s ease;\r\n\r\n  ${({ pointer }) =>\r\n    pointer === 'mouse'\r\n      ? `\r\n      &{\r\n        img {\r\n          transform: translate3d(0, 0, 0);\r\n          transition: transform 0.3s ease;\r\n        }\r\n        figcaption {\r\n          position: absolute;\r\n          bottom: 0;\r\n          left: 0;\r\n          transform: translate3d(0, 144px, 0);\r\n          transition: transform 0.3s ease;\r\n        }\r\n\r\n        &:hover {\r\n          figcaption {\r\n            transform: translate3d(0, 0, 0);\r\n            transition: transform 0.3s ease;\r\n          }\r\n          img {\r\n            transform: translate3d(0, -144px, 0);\r\n          }\r\n        }\r\n      }\r\n    `\r\n      : `\r\n      figcaption {\r\n        transform: translate3d(0, 0, 0);\r\n        position: relative;\r\n        bottom: auto;\r\n        left: auto;\r\n        height: auto;\r\n      }\r\n  `}\r\n`\r\n\r\nexport default {\r\n  Demo,\r\n  Figure,\r\n}\r\n","import React, { useState, useLayoutEffect, useRef } from 'react'\r\nimport {\r\n  MouseOutlined,\r\n  TouchAppOutlined,\r\n  KeyboardOutlined,\r\n  SwapHoriz,\r\n} from '@material-ui/icons'\r\nimport { navigate } from '@reach/router'\r\n\r\nimport useInteraction from './useInteraction'\r\n\r\nimport logo from './logo.svg'\r\nimport './Reset.scss'\r\nimport './Demo.scss'\r\nimport Styled from './Demo.styles'\r\n\r\nconst Demo = ({ location }) => {\r\n  const [pointerType, pointerHistory, pointerAccuracy] = useInteraction({\r\n    initial: null,\r\n  })\r\n  const [hover, setHover] = useState(false)\r\n  const [imageHeight, setImageHeight] = useState(null)\r\n  const [figcaptionHeight, setFigcaptionHeight] = useState(null)\r\n  const imageRef = useRef(null)\r\n  const figcaptionRef = useRef(null)\r\n\r\n  const updateFigureSize = () => {\r\n    setImageHeight(imageRef.current.offsetHeight)\r\n    setFigcaptionHeight(figcaptionRef.current.offsetHeight)\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    let img = new Image()\r\n    img.src = imageRef.current.src\r\n    img.onload = () => {\r\n      updateFigureSize()\r\n    }\r\n\r\n    window.addEventListener('resize', updateFigureSize)\r\n    return () => window.removeEventListener('resize', updateFigureSize)\r\n  }, [])\r\n\r\n  const handleClick = event => {\r\n    event.preventDefault()\r\n    alert('clicked')\r\n  }\r\n\r\n  const handleNavigate = () => {\r\n    alert('navigated')\r\n    navigate(location.pathname, {\r\n      state: {\r\n        page: {},\r\n      },\r\n      replace: true,\r\n    })\r\n  }\r\n\r\n  const toggleHover = event => {\r\n    pointerType === 'mouse' && setHover(current => !current)\r\n  }\r\n\r\n  return (\r\n    <Styled.Demo\r\n      className=\"Demo\"\r\n      pointer={pointerType}\r\n      data-user-interaction={pointerType}\r\n      data-user-can-hover={pointerType === 'mouse'}\r\n    >\r\n      <header>\r\n        <img src={logo} className=\"React-logo\" alt=\"logo\" />\r\n        <h1 onClick={handleNavigate}>useInteraction</h1>\r\n      </header>\r\n      <main>\r\n        <h3>\r\n          React hook <code>useInteraction()</code> allows to get the user\r\n          interaction type: <code>touch</code>, <code>mouse</code> or{' '}\r\n          <code>keyboard</code>.\r\n          <br />\r\n        </h3>\r\n        <p>\r\n          <strong>\r\n            <code className=\"variable\">pointerType</code>\r\n          </strong>{' '}\r\n          provides the current input of the user interaction.\r\n          <br /> <br />\r\n          <strong>\r\n            <code className=\"variable\">pointerHistory</code>\r\n          </strong>{' '}\r\n          keeps a record of previous inputs of the user interaction listed in\r\n          reverse chronological order.\r\n          <br /> <br />\r\n          <strong>\r\n            <code className=\"variable\">pointerAccuracy</code>\r\n          </strong>{' '}\r\n          is the max size of contact geometry collected from the current\r\n          pointer.\r\n          <br />\r\n          [Experimental Feature]{' '}\r\n          <i>\r\n            Not all browsers yet support{' '}\r\n            <a\r\n              href=\"https://caniuse.com/#feat=pointer\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Pointer events\r\n            </a>\r\n          </i>\r\n        </p>\r\n\r\n        <section id=\"image\">\r\n          <h2>detect hover capability</h2>\r\n          <div>\r\n            <MouseOutlined /> <SwapHoriz /> <TouchAppOutlined />\r\n            <br />\r\n            <span>\r\n              switching between <code>mouse</code>/<code>touch</code> or{' '}\r\n              <code>mouse</code>/<code>keyboard</code> will show/hide the figure\r\n              caption\r\n            </span>\r\n            <br />\r\n            <MouseOutlined /> <SwapHoriz /> <KeyboardOutlined />\r\n          </div>\r\n          <Styled.Figure\r\n            pointer={pointerType}\r\n            size={[imageHeight, figcaptionHeight]}\r\n          >\r\n            <a\r\n              href=\"https://flic.kr/p/kq58ST\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <img\r\n                ref={imageRef}\r\n                src=\"https://farm8.staticflickr.com/7353/12743181443_9dfd24a886_z.jpg\"\r\n                alt=\"Beautiful light\"\r\n              />\r\n            </a>\r\n            <figcaption ref={figcaptionRef}>\r\n              <h3>\r\n                <a\r\n                  href=\"https://flic.kr/p/kq58ST\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Beautiful light\r\n                </a>{' '}\r\n                (CC BY-NC-ND 2.0)\r\n              </h3>\r\n              <small>\r\n                by{' '}\r\n                <a\r\n                  href=\"https://www.flickr.com/people/rfunnell/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  Ross Funnell\r\n                </a>\r\n              </small>\r\n              <p className=\"description\">\r\n                The room was vacant except for a metal slab that served as a bed\r\n                and the six-legged, cat-like creature sitting on the edge of the\r\n                bed watching its sleeping occupant.\r\n              </p>\r\n            </figcaption>\r\n          </Styled.Figure>\r\n          <h3>\r\n            It can be used to present to the user actions and information behind\r\n            hover states; in place of the hover CSS media feature{' '}\r\n            <code>@media (hover: hover)</code>, not supported by all browsers.\r\n          </h3>\r\n        </section>\r\n        <section id=\"form\">\r\n          <h2>detect keyboard navigation</h2>\r\n          <div>\r\n            <MouseOutlined /> <SwapHoriz /> <KeyboardOutlined />\r\n            <br />\r\n            <span>\r\n              switching between <code>mouse</code>/<code>keyboard</code> will\r\n              show/hide an outline around the focused element\r\n            </span>\r\n          </div>\r\n          <form>\r\n            <input type=\"text\" />\r\n            <select>\r\n              <option value=\"\"></option>\r\n              <option value=\"0\">0</option>\r\n              <option value=\"1\">1</option>\r\n            </select>\r\n            <textarea />\r\n            <div>{hover ? `hovered` : `-`}</div>\r\n            <button\r\n              onClick={handleClick}\r\n              onMouseEnter={toggleHover}\r\n              onMouseLeave={toggleHover}\r\n            >\r\n              OKAY\r\n            </button>\r\n          </form>\r\n          <h3>\r\n            It can also help to provide the keyboard users with a visual\r\n            indicator of the element (link, button, and form control) that\r\n            currently has focus.\r\n            <br />\r\n            <br />\r\n            <i>\r\n              Keyboard strokes has no effect on the interaction type when the\r\n              user is typing in a form element (input, select, and textarea).\r\n              Only keyboard navigation is monitored.\r\n            </i>\r\n          </h3>\r\n        </section>\r\n      </main>\r\n      <footer>\r\n        <code>\r\n          pointer: {pointerType || `none`} (can\r\n          {pointerType !== 'mouse' && 'not'} hover)\r\n          <br />\r\n          history: {`[${pointerHistory.join(', ')}]`}\r\n          <br />\r\n          accuracy: {pointerAccuracy || `none`}\r\n          <br />\r\n        </code>\r\n      </footer>\r\n    </Styled.Demo>\r\n  )\r\n}\r\n\r\nexport default Demo\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Demo from './Demo'\nimport { Location } from '@reach/router'\n\nif (process.env.NODE_ENV !== 'production') {\n  localStorage.setItem('debug', 'use-interaction')\n}\n\nReactDOM.render(\n  <Location>{({ location }) => <Demo location={location} />}</Location>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}